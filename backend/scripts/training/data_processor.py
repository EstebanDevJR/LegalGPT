#!/usr/bin/env python3
"""
üìä Data Processor - LegalGPT Fine-Tuning

Procesador de datos para generar ejemplos de entrenamiento
de alta calidad para el fine-tuning de modelos legales.
"""

import asyncio
from typing import Dict, Any, List, Optional
from pathlib import Path

class DataProcessor:
    """Procesador de datos de entrenamiento"""
    
    def __init__(self):
        self.legal_categories = {
            "civil": "Derecho civil y personal",
            "comercial": "Derecho comercial y empresarial", 
            "laboral": "Derecho laboral y empleo",
            "tributario": "Derecho tributario y fiscal"
        }
    
    def get_base_examples(self) -> List[Dict[str, Any]]:
        """Obtiene ejemplos base de alta calidad"""
        
        return [
            {
                "messages": [
                    {"role": "system", "content": "Eres un experto en derecho colombiano especializado en asesor√≠a legal para PyMEs."},
                    {"role": "user", "content": "¬øC√≥mo constituyo una SAS en Colombia?"},
                    {"role": "assistant", "content": "Para constituir una SAS (Sociedad por Acciones Simplificada) en Colombia:\n\n1. **Documento privado**: Se constituye mediante documento privado autenticado ante notario o c√°mara de comercio\n2. **Registro mercantil**: Inscripci√≥n en el registro mercantil de la c√°mara de comercio\n3. **Capital m√≠nimo**: No requiere capital m√≠nimo\n4. **Socios**: Puede tener de 1 a 200 accionistas\n5. **Responsabilidad**: Los socios responden hasta el monto de sus aportes\n\n**Documentos necesarios**:\n- Documento de constituci√≥n\n- Estatutos sociales\n- Formulario RUES\n- Pago de derechos de matr√≠cula\n\nLa SAS es ideal para PyMEs por su flexibilidad y facilidad de constituci√≥n."}
                ],
                "category": "comercial",
                "confidence": 0.95,
                "complexity": "medium"
            },
            {
                "messages": [
                    {"role": "system", "content": "Eres un experto en derecho colombiano especializado en asesor√≠a legal para PyMEs."},
                    {"role": "user", "content": "¬øCu√°les son las obligaciones laborales b√°sicas de una microempresa?"},
                    {"role": "assistant", "content": "Las obligaciones laborales b√°sicas para una microempresa en Colombia incluyen:\n\n**1. Contratos de trabajo**:\n- Contrato escrito dentro de los primeros 15 d√≠as\n- Periodo de prueba m√°ximo 2 meses\n- Especificar funciones, salario y jornada\n\n**2. Prestaciones sociales**:\n- Prima de servicios (junio y diciembre)\n- Cesant√≠as e intereses sobre cesant√≠as\n- Vacaciones (15 d√≠as h√°biles por a√±o)\n\n**3. Seguridad social**:\n- Afiliaci√≥n a EPS (salud)\n- Afiliaci√≥n a AFP (pensi√≥n)\n- ARL (riesgos laborales)\n\n**4. Parafiscales**:\n- SENA (2%)\n- ICBF (3%)\n- Cajas de compensaci√≥n (4%)\n\n**Para microempresas**: Algunos beneficios y tarifas diferenciales seg√∫n la Ley de Formalizaci√≥n Empresarial."}
                ],
                "category": "laboral",
                "confidence": 0.98,
                "complexity": "high"
            }
        ]
    
    def get_static_examples(self) -> List[Dict[str, Any]]:
        """Obtiene ejemplos est√°ticos cuando RAG no est√° disponible"""
        
        return [
            {
                "messages": [
                    {"role": "system", "content": "Eres un experto en derecho colombiano especializado en asesor√≠a legal para PyMEs."},
                    {"role": "user", "content": "¬øQu√© r√©gimen tributario me conviene para mi peque√±a empresa?"},
                    {"role": "assistant", "content": "Para elegir el r√©gimen tributario adecuado considera:\n\n**R√©gimen Simple de Tributaci√≥n (RST)**:\n- Para ingresos hasta 50.000 UVT\n- Tarifa √∫nica del 19%\n- Incluye IVA e impuesto de renta\n- Ideal para peque√±as empresas\n\n**R√©gimen Ordinario**:\n- Para ingresos superiores a 50.000 UVT\n- Tarifa del 35% sobre utilidades\n- Mayor control tributario\n- M√°s beneficios deducibles\n\n**Recomendaci√≥n**: Para PyMEs nuevas, el RST suele ser m√°s conveniente por su simplicidad administrativa y menor carga fiscal inicial."}
                ],
                "category": "tributario",
                "confidence": 0.92,
                "complexity": "medium"
            }
        ]
    
    async def generate_rag_examples(self, rag_service, interactive: bool = False) -> List[Dict[str, Any]]:
        """
        Genera ejemplos usando el servicio RAG actual
        
        Args:
            rag_service: Servicio RAG inicializado
            interactive: Si permite revisi√≥n manual
            
        Returns:
            Lista de ejemplos generados
        """
        questions = [
            "¬øC√≥mo protejo mi marca comercial?",
            "¬øQu√© pasos seguir para despedir un empleado?",
            "¬øC√≥mo declaro mis impuestos como persona jur√≠dica?",
            "¬øQu√© seguros son obligatorios para mi empresa?",
            "¬øC√≥mo redacto un contrato de servicios?",
            "¬øCu√°les son mis derechos como empleador?",
            "¬øC√≥mo manejar una demanda laboral?",
            "¬øQu√© obligaciones tengo con el medio ambiente?"
        ]
        
        examples = []
        
        for question in questions:
            try:
                print(f"ü§ñ Generando respuesta para: {question}")
                
                # Generar respuesta usando RAG
                result = await rag_service.query(
                    question=question,
                    context="",
                    user_info={"company_type": "peque√±a"},
                    user_documents=[]
                )
                
                response = result.get("answer", "")
                
                if interactive:
                    print(f"\nPregunta: {question}")
                    print(f"Respuesta generada: {response[:200]}...")
                    edit = input("¬øEditar respuesta? (s/N): ").lower()
                    if edit == 's':
                        response = input("Nueva respuesta: ")
                
                example = {
                    "messages": [
                        {"role": "system", "content": "Eres un experto en derecho colombiano especializado en asesor√≠a legal para PyMEs."},
                        {"role": "user", "content": question},
                        {"role": "assistant", "content": response}
                    ],
                    "category": self._classify_question(question),
                    "confidence": result.get("confidence", 0.8),
                    "complexity": "medium"
                }
                
                examples.append(example)
                
            except Exception as e:
                print(f"‚ùå Error generando ejemplo para '{question}': {e}")
                continue
        
        return examples
    
    def get_category_examples(self, category: str, count: int) -> List[Dict[str, Any]]:
        """
        Genera ejemplos para una categor√≠a espec√≠fica
        
        Args:
            category: Categor√≠a legal
            count: N√∫mero de ejemplos
            
        Returns:
            Lista de ejemplos de la categor√≠a
        """
        category_questions = {
            "civil": [
                "¬øC√≥mo redacto un contrato de arrendamiento?",
                "¬øQu√© hago si no me pagan una deuda?",
                "¬øC√≥mo protejo mis datos personales?",
                "¬øQu√© derechos tengo como consumidor?",
                "¬øC√≥mo demando por da√±os y perjuicios?"
            ],
            "comercial": [
                "¬øC√≥mo registro mi empresa?",
                "¬øQu√© tipo de sociedad me conviene?",
                "¬øC√≥mo protejo mi propiedad intelectual?",
                "¬øQu√© obligaciones tengo como comerciante?",
                "¬øC√≥mo manejar competencia desleal?"
            ],
            "laboral": [
                "¬øC√≥mo contratar empleados?",
                "¬øQu√© prestaciones sociales debo pagar?",
                "¬øC√≥mo manejar una licencia m√©dica?",
                "¬øQu√© hacer ante un accidente laboral?",
                "¬øC√≥mo implementar trabajo remoto?"
            ],
            "tributario": [
                "¬øC√≥mo calcular mis impuestos?",
                "¬øQu√© deducciones puedo aplicar?",
                "¬øC√≥mo presentar declaraci√≥n de renta?",
                "¬øQu√© hacer ante una auditor√≠a?",
                "¬øC√≥mo optimizar mi carga tributaria?"
            ]
        }
        
        questions = category_questions.get(category, [])[:count]
        examples = []
        
        for question in questions:
            # Generar respuesta b√°sica (en implementaci√≥n real, usar RAG)
            example = {
                "messages": [
                    {"role": "system", "content": "Eres un experto en derecho colombiano especializado en asesor√≠a legal para PyMEs."},
                    {"role": "user", "content": question},
                    {"role": "assistant", "content": f"Respuesta especializada en {category} para: {question}"}
                ],
                "category": category,
                "confidence": 0.85,
                "complexity": "medium"
            }
            examples.append(example)
        
        return examples
    
    def _classify_question(self, question: str) -> str:
        """Clasifica una pregunta en una categor√≠a legal"""
        
        keywords = {
            "civil": ["contrato", "arrendamiento", "deuda", "consumidor", "da√±os"],
            "comercial": ["empresa", "sociedad", "marca", "comerciante", "competencia"],
            "laboral": ["empleado", "trabajo", "prestaciones", "licencia", "accidente"],
            "tributario": ["impuesto", "declaraci√≥n", "deducci√≥n", "auditor√≠a", "renta"]
        }
        
        question_lower = question.lower()
        
        for category, terms in keywords.items():
            if any(term in question_lower for term in terms):
                return category
        
        return "general" 