"""
üìä Endpoints de Estad√≠sticas y Dashboard para LegalGPT

Este m√≥dulo proporciona endpoints para:
- Dashboard principal con estad√≠sticas completas
- Estad√≠sticas de documentos por usuario
- M√©tricas de uso del sistema
- Actividad reciente
- Analytics avanzados
- Exportaci√≥n de datos
"""

from fastapi import APIRouter, HTTPException, Request, Query, Depends
from fastapi.responses import JSONResponse, StreamingResponse
from typing import Optional, List
import json
from datetime import datetime, timedelta

from models.stats import (
    DashboardResponse, AnalyticsRequest, ExportStatsRequest,
    CategoryStats, DocumentStats, ChatStats, UsageStats, ActivityLog
)
from services.stats.stats_service import stats_service
from services.auth.auth_middleware import require_auth, require_usage_check
from services.monitoring.usage_service import usage_service
from services.documents.document_service import document_service
from services.legal.chat_service import chat_service
from core.config import STATS_CONFIG

router = APIRouter(prefix="/stats", tags=["Estad√≠sticas y Dashboard"])

@router.get("/dashboard", response_model=DashboardResponse)
@require_auth()
@require_usage_check("dashboard_view")
async def get_dashboard_stats(request: Request):
    """
    üìä Obtener estad√≠sticas completas del dashboard
    
    Retorna todas las m√©tricas principales:
    - Estad√≠sticas generales
    - Consultas por categor√≠a
    - Actividad semanal
    - Logros del usuario
    - Estad√≠sticas de documentos
    - Estad√≠sticas de chat
    - L√≠mites de uso
    - Actividad reciente
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener estad√≠sticas completas del dashboard
        dashboard_data = await stats_service.get_dashboard_stats(user_id)
        
        return dashboard_data
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas del dashboard: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo estad√≠sticas del dashboard"
        )

@router.get("/documents", response_model=DocumentStats)
@require_auth()
async def get_document_stats(
    request: Request,
    period: str = Query("month", description="Per√≠odo: day, week, month, year")
):
    """
    üìÑ Obtener estad√≠sticas de documentos por usuario
    
    Args:
        period: Per√≠odo de tiempo para las estad√≠sticas
        
    Returns:
        Estad√≠sticas detalladas de documentos
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener documentos del usuario
        documents = await document_service.get_user_documents(user_id)
        
        # Filtrar por per√≠odo si es necesario
        if period != "all":
            filtered_docs = await stats_service._filter_documents_by_period(
                documents, period
            )
        else:
            filtered_docs = documents
        
        # Calcular estad√≠sticas
        total_documents = len(filtered_docs)
        status_counts = {}
        type_counts = {}
        total_size = 0
        
        for doc in filtered_docs:
            status = doc.get("status", "unknown")
            doc_type = doc.get("file_type", "unknown")
            size = doc.get("file_size", 0)
            
            status_counts[status] = status_counts.get(status, 0) + 1
            type_counts[doc_type] = type_counts.get(doc_type, 0) + 1
            total_size += size
        
        # Calcular promedios
        average_size_kb = total_size / total_documents if total_documents > 0 else 0
        total_size_mb = total_size / (1024 * 1024)
        
        return DocumentStats(
            total_documents=total_documents,
            documents_by_status=status_counts,
            documents_by_type=type_counts,
            total_size_mb=round(total_size_mb, 2),
            average_size_kb=round(average_size_kb, 2)
        )
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas de documentos: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo estad√≠sticas de documentos"
        )

@router.get("/usage", response_model=UsageStats)
@require_auth()
async def get_usage_stats(request: Request):
    """
    üìä Obtener m√©tricas de uso del sistema
    
    Returns:
        Estad√≠sticas detalladas de uso con l√≠mites
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener estad√≠sticas de uso
        usage_stats = await usage_service.get_usage_stats(user_id)
        
        # Obtener l√≠mites
        limits = await usage_service.check_usage_limits(user_id)
        
        return UsageStats(
            daily_queries=usage_stats.daily_queries,
            weekly_queries=usage_stats.weekly_queries,
            monthly_queries=usage_stats.monthly_queries,
            total_queries=usage_stats.total_queries,
            remaining_daily=usage_stats.remaining_daily,
            remaining_weekly=usage_stats.remaining_weekly,
            daily_limit=limits.daily_limit,
            weekly_limit=limits.weekly_limit,
            is_daily_exceeded=limits.is_daily_exceeded,
            is_weekly_exceeded=limits.is_weekly_exceeded
        )
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas de uso: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo estad√≠sticas de uso"
        )

@router.get("/activity", response_model=List[ActivityLog])
@require_auth()
async def get_recent_activity(
    request: Request,
    limit: int = Query(10, ge=1, le=50, description="N√∫mero m√°ximo de actividades")
):
    """
    üìù Obtener actividad reciente del usuario
    
    Args:
        limit: N√∫mero m√°ximo de actividades a retornar
        
    Returns:
        Lista de actividades recientes
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener actividad del usuario
        activity = await stats_service._get_recent_activity(user_id)
        
        # Limitar resultados
        return activity[:limit]
        
    except Exception as e:
        print(f"‚ùå Error obteniendo actividad reciente: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo actividad reciente"
        )

@router.get("/categories", response_model=List[CategoryStats])
@require_auth()
async def get_category_stats(
    request: Request,
    period: str = Query("month", description="Per√≠odo: day, week, month, year")
):
    """
    üìä Obtener estad√≠sticas por categor√≠a
    
    Args:
        period: Per√≠odo de tiempo para las estad√≠sticas
        
    Returns:
        Lista de estad√≠sticas por categor√≠a
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener estad√≠sticas por categor√≠a
        categories = await stats_service._get_category_stats(user_id)
        
        return categories
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas por categor√≠a: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo estad√≠sticas por categor√≠a"
        )

@router.get("/chat", response_model=ChatStats)
@require_auth()
async def get_chat_stats(request: Request):
    """
    üí¨ Obtener estad√≠sticas de chat
    
    Returns:
        Estad√≠sticas detalladas del chat
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener estad√≠sticas de chat
        chat_stats = await chat_service.get_chat_stats(user_id)
        
        return chat_stats
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas de chat: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo estad√≠sticas de chat"
        )

@router.post("/analytics")
@require_auth()
async def get_analytics(
    request: Request,
    analytics_request: AnalyticsRequest
):
    """
    üìà Obtener analytics avanzados
    
    Args:
        analytics_request: Par√°metros para el an√°lisis
        
    Returns:
        Analytics detallados seg√∫n los par√°metros
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener analytics seg√∫n los par√°metros
        analytics_data = await stats_service._get_analytics(
            user_id,
            analytics_request.period,
            analytics_request.category,
            analytics_request.include_details
        )
        
        return analytics_data
        
    except Exception as e:
        print(f"‚ùå Error obteniendo analytics: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo analytics"
        )

@router.post("/export")
@require_auth()
async def export_stats(
    request: Request,
    export_request: ExportStatsRequest
):
    """
    üì§ Exportar estad√≠sticas
    
    Args:
        export_request: Par√°metros de exportaci√≥n
        
    Returns:
        Archivo con las estad√≠sticas exportadas
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Generar datos de exportaci√≥n
        export_data = await stats_service._generate_export_data(
            user_id,
            export_request.period,
            export_request.include_charts
        )
        
        # Generar archivo seg√∫n formato
        if export_request.format == "json":
            content = json.dumps(export_data, indent=2, ensure_ascii=False)
            media_type = "application/json"
            filename = f"stats_{user_id}_{datetime.now().strftime('%Y%m%d')}.json"
            
        elif export_request.format == "csv":
            content = await stats_service._convert_to_csv(export_data)
            media_type = "text/csv"
            filename = f"stats_{user_id}_{datetime.now().strftime('%Y%m%d')}.csv"
            
        else:  # pdf
            content = await stats_service._convert_to_pdf(export_data)
            media_type = "application/pdf"
            filename = f"stats_{user_id}_{datetime.now().strftime('%Y%m%d')}.pdf"
        
        # Crear respuesta de streaming
        def generate():
            yield content
        
        return StreamingResponse(
            generate(),
            media_type=media_type,
            headers={
                "Content-Disposition": f"attachment; filename={filename}"
            }
        )
        
    except Exception as e:
        print(f"‚ùå Error exportando estad√≠sticas: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error exportando estad√≠sticas"
        )

@router.get("/summary")
@require_auth()
async def get_stats_summary(request: Request):
    """
    üìã Obtener resumen de estad√≠sticas
    
    Returns:
        Resumen r√°pido de las m√©tricas principales
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener resumen de estad√≠sticas
        summary = await stats_service._get_stats_summary(user_id)
        
        return summary
        
    except Exception as e:
        print(f"‚ùå Error obteniendo resumen de estad√≠sticas: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo resumen de estad√≠sticas"
        )

@router.get("/achievements")
@require_auth()
async def get_user_achievements(request: Request):
    """
    üèÜ Obtener logros del usuario
    
    Returns:
        Lista de logros obtenidos
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener logros del usuario
        achievements = await stats_service._get_achievements(user_id)
        
        return achievements
        
    except Exception as e:
        print(f"‚ùå Error obteniendo logros: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo logros"
        )

@router.get("/weekly-activity")
@require_auth()
async def get_weekly_activity(request: Request):
    """
    üìÖ Obtener actividad semanal
    
    Returns:
        Actividad organizada por d√≠a de la semana
    """
    try:
        user_data = request.state.user
        user_id = user_data["id"]
        
        # Obtener actividad semanal
        weekly_activity = await stats_service._get_weekly_activity(user_id)
        
        return weekly_activity
        
    except Exception as e:
        print(f"‚ùå Error obteniendo actividad semanal: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo actividad semanal"
        )

@router.get("/system-metrics")
@require_auth()
async def get_system_metrics(request: Request):
    """
    üîß Obtener m√©tricas del sistema (solo admin)
    
    Returns:
        M√©tricas generales del sistema
    """
    try:
        user_data = request.state.user
        
        # Verificar si es admin
        if user_data.get("role") != "admin":
            raise HTTPException(
                status_code=403,
                detail="Acceso denegado. Se requieren permisos de administrador."
            )
        
        # Obtener m√©tricas del sistema
        system_metrics = await usage_service.get_admin_stats()
        
        return system_metrics
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error obteniendo m√©tricas del sistema: {e}")
        raise HTTPException(
            status_code=500,
            detail="Error obteniendo m√©tricas del sistema"
        ) 